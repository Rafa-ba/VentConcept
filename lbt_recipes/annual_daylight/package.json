{
  "type": "RecipeInterface",
  "annotations": {},
  "api_version": "v1beta1",
  "metadata": {
    "type": "MetaData",
    "annotations": {},
    "name": "annual-daylight",
    "tag": "0.6.5",
    "app_version": null,
    "keywords": [
      "honeybee",
      "radiance",
      "ladybug-tools",
      "daylight",
      "annual-daylight"
    ],
    "maintainers": [
      {
        "type": "Maintainer",
        "annotations": {},
        "name": "mostapha",
        "email": "mostapha@ladybug.tools"
      },
      {
        "type": "Maintainer",
        "annotations": {},
        "name": "ladybug-tools",
        "email": "info@ladybug.tools"
      }
    ],
    "home": "https://github.com/pollination/annual-daylight",
    "sources": [
      "https://hub.docker.com/r/ladybugtools/honeybee-radiance"
    ],
    "icon": "https://raw.githubusercontent.com/ladybug-tools/artwork/master/icons_components/honeybee/png/annualrecipe.png",
    "deprecated": null,
    "description": "Annual daylight recipe for Pollination.",
    "license": {
      "type": "License",
      "annotations": {},
      "name": "PolyForm Shield License 1.0.0",
      "url": "https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt"
    }
  },
  "source": null,
  "inputs": [
    {
      "type": "DAGStringInput",
      "annotations": {},
      "name": "grid-filter",
      "description": "Text for a grid identifer or a pattern to filter the sensor grids of the model that are simulated. For instance, first_floor_* will simulate only the sensor grids that have an identifier that starts with first_floor_. By default, all grids in the model will be simulated.",
      "default": "*",
      "alias": [
        {
          "type": "DAGStringInputAlias",
          "annotations": {},
          "name": "grid_filter",
          "description": "Text for a grid identifer or a pattern to filter the sensor grids of the model that are simulated. For instance, first_floor_* will simulate only the sensor grids that have an identifier that starts with first_floor_. By default, all grids in the model will be simulated.",
          "platform": [
            "grasshopper"
          ],
          "handler": [],
          "default": "*",
          "required": false,
          "spec": null
        }
      ],
      "required": false,
      "spec": null
    },
    {
      "type": "DAGFileInput",
      "annotations": {},
      "name": "model",
      "description": "A Honeybee model in HBJSON file format.",
      "default": null,
      "alias": [
        {
          "type": "DAGGenericInputAlias",
          "annotations": {},
          "name": "model",
          "description": "A Honeybee Model to simulate or the path to a HBJSON file of a Model. This can also be the path to a HBpkl file, though this is only recommended for cases where the model is extremely large. Note that this model should have sensor grids assigned to it.",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.inputs.model",
              "function": "model_to_json_grid_check",
              "index": 0
            },
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "csharp",
              "module": "Pollination.RhinoHandlers",
              "function": "HBModelToJSON",
              "index": 0
            }
          ],
          "default": null,
          "required": true,
          "spec": null
        },
        {
          "type": "DAGLinkedInputAlias",
          "annotations": {},
          "name": "model",
          "description": "This input links the model to Rhino model.",
          "platform": [
            "rhino"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "csharp",
              "module": "Pollination.RhinoHandlers",
              "function": "RhinoHBModelToJSON",
              "index": 0
            }
          ],
          "default": null,
          "required": true,
          "spec": null
        }
      ],
      "required": true,
      "spec": null,
      "extensions": [
        "json",
        "hbjson"
      ]
    },
    {
      "type": "DAGNumberInput",
      "annotations": {},
      "name": "north",
      "description": "A number for rotation from north.",
      "default": 0.0,
      "alias": [
        {
          "type": "DAGGenericInputAlias",
          "annotations": {},
          "name": "north",
          "description": "A number between -360 and 360 for the counterclockwise difference between the North and the positive Y-axis in degrees. This can also be Vector for the direction to North. (Default: 0).",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.inputs.north",
              "function": "north_vector_to_angle",
              "index": 0
            }
          ],
          "default": "0",
          "required": false,
          "spec": null
        }
      ],
      "required": false,
      "spec": {
        "type": "number",
        "minimum": 0,
        "maximum": 360
      }
    },
    {
      "type": "DAGStringInput",
      "annotations": {},
      "name": "radiance-parameters",
      "description": "The radiance parameters for ray tracing.",
      "default": "-ab 2 -ad 5000 -lw 2e-05",
      "alias": [
        {
          "type": "DAGStringInputAlias",
          "annotations": {},
          "name": "radiance_par",
          "description": "Text for the radiance parameters to be used for ray tracing. (Default: -ab 2 -ad 5000 -lw 2e-05).",
          "platform": [
            "grasshopper"
          ],
          "handler": [],
          "default": "-ab 2 -ad 5000 -lw 2e-05",
          "required": false,
          "spec": null
        }
      ],
      "required": false,
      "spec": null
    },
    {
      "type": "DAGFileInput",
      "annotations": {},
      "name": "schedule",
      "description": "Path to an annual schedule file. Values should be 0-1 separated by new line. If not provided an 8-5 annual schedule will be created.",
      "default": null,
      "alias": [
        {
          "type": "DAGGenericInputAlias",
          "annotations": {},
          "name": "schedule",
          "description": "An annual occupancy schedule, either as a path to a csv file (with 8760 rows), a Ladybug Hourly Continuous Data Collection or a HB-Energy schedule object. This can also be the identifier of a schedule in your HB-Energy schedule library. Any value in this schedule that is 0.1 or above will be considered occupied.",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.inputs.schedule",
              "function": "schedule_to_csv",
              "index": 0
            }
          ],
          "default": null,
          "required": false,
          "spec": null
        }
      ],
      "required": false,
      "spec": null,
      "extensions": [
        "txt",
        "csv"
      ]
    },
    {
      "type": "DAGIntegerInput",
      "annotations": {},
      "name": "sensor-count",
      "description": "The maximum number of grid points per parallel execution.",
      "default": 200,
      "alias": [
        {
          "type": "DAGIntegerInputAlias",
          "annotations": {},
          "name": "sensor_count",
          "description": "Positive integer for the number of sensor grid points per parallel execution. Lower numbers will result in sensor grids being split into more pieces and, since each grid piece is run by a separate worker, this can mean a faster simulation on machines with several CPUs. However ,If the number is too low, the overhad of splitting the grid will not be worth the time gained through parallelization. (Default: 200).",
          "platform": [
            "grasshopper"
          ],
          "handler": [],
          "default": 200,
          "required": false,
          "spec": null
        }
      ],
      "required": false,
      "spec": {
        "type": "integer",
        "minimum": 1
      }
    },
    {
      "type": "DAGStringInput",
      "annotations": {},
      "name": "thresholds",
      "description": "A string to change the threshold for daylight autonomy and useful daylight illuminance. Valid keys are -t for daylight autonomy threshold, -lt for the lower threshold for useful daylight illuminance and -ut for the upper threshold. The default is -t 300 -lt 100 -ut 3000. The order of the keys is not important and you can include one or all of them. For instance if you only want to change the upper threshold to 2000 lux you should use -ut 2000 as the input.",
      "default": "-t 300 -lt 100 -ut 3000",
      "alias": [
        {
          "type": "DAGStringInputAlias",
          "annotations": {},
          "name": "thresholds",
          "description": "A string to change the threshold for daylight autonomy (DA) and useful daylight illuminance (UDI). Valid keys are -t for daylight autonomy threshold, -lt for the lower threshold for useful daylight illuminance and -ut for the upper threshold. The order of the keys is not important and you can include one or all of them. For instance if you only want to change the upper threshold to 2000 lux you should use -ut 2000 as the input. (Default: -t 300 -lt 100 -ut 3000).",
          "platform": [
            "grasshopper"
          ],
          "handler": [],
          "default": "-t 300 -lt 100 -ut 3000",
          "required": false,
          "spec": null
        }
      ],
      "required": false,
      "spec": null
    },
    {
      "type": "DAGFileInput",
      "annotations": {},
      "name": "wea",
      "description": "Wea file.",
      "default": null,
      "alias": [
        {
          "type": "DAGGenericInputAlias",
          "annotations": {},
          "name": "wea",
          "description": "A Wea object produced from the Wea components that are under the Light Sources tab. This can also be the path to a .wea or a .epw file.",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.inputs.wea",
              "function": "wea_handler_timestep_check",
              "index": 0
            }
          ],
          "default": null,
          "required": true,
          "spec": null
        }
      ],
      "required": true,
      "spec": null,
      "extensions": [
        "wea"
      ]
    }
  ],
  "outputs": [
    {
      "type": "DAGFolderOutput",
      "annotations": {},
      "name": "cda",
      "description": "Continuous daylight autonomy results.",
      "from": {
        "type": "FolderReference",
        "annotations": {},
        "path": "metrics/cda"
      },
      "alias": [
        {
          "type": "DAGGenericOutputAlias",
          "annotations": {},
          "name": "cDA",
          "description": "Continuous daylight autonomy values for each sensor. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_cda_from_folder",
              "index": 0
            }
          ]
        },
        {
          "type": "DAGLinkedOutputAlias",
          "annotations": {},
          "name": "cDA Results",
          "description": null,
          "platform": [
            "rhino"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_cda_from_folder",
              "index": 0
            },
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "csharp",
              "module": "Pollination.RhinoHandlers",
              "function": "LoadMeshBasedResultsToRhino",
              "index": 0
            }
          ]
        }
      ],
      "required": true
    },
    {
      "type": "DAGFolderOutput",
      "annotations": {},
      "name": "da",
      "description": "Daylight autonomy results.",
      "from": {
        "type": "FolderReference",
        "annotations": {},
        "path": "metrics/da"
      },
      "alias": [
        {
          "type": "DAGGenericOutputAlias",
          "annotations": {},
          "name": "DA",
          "description": "Daylight autonomy values for each sensor. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_da_from_folder",
              "index": 0
            }
          ]
        },
        {
          "type": "DAGLinkedOutputAlias",
          "annotations": {},
          "name": "DA Results",
          "description": null,
          "platform": [
            "rhino"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_da_from_folder",
              "index": 0
            },
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "csharp",
              "module": "Pollination.RhinoHandlers",
              "function": "LoadMeshBasedResultsToRhino",
              "index": 0
            }
          ]
        }
      ],
      "required": true
    },
    {
      "type": "DAGFolderOutput",
      "annotations": {},
      "name": "metrics",
      "description": "Annual metrics folder.",
      "from": {
        "type": "FolderReference",
        "annotations": {},
        "path": "metrics"
      },
      "alias": [],
      "required": true
    },
    {
      "type": "DAGFolderOutput",
      "annotations": {},
      "name": "results",
      "description": "Folder with raw result files (.ill) that contain illuminance matrices.",
      "from": {
        "type": "FolderReference",
        "annotations": {},
        "path": "results"
      },
      "alias": [
        {
          "type": "DAGGenericOutputAlias",
          "annotations": {},
          "name": "results",
          "description": "Raw result files (.ill) that contain illuminance matrices.",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "sort_ill_from_folder",
              "index": 0
            }
          ]
        }
      ],
      "required": true
    },
    {
      "type": "DAGFolderOutput",
      "annotations": {},
      "name": "udi",
      "description": "Useful daylight illuminance results.",
      "from": {
        "type": "FolderReference",
        "annotations": {},
        "path": "metrics/udi"
      },
      "alias": [
        {
          "type": "DAGGenericOutputAlias",
          "annotations": {},
          "name": "UDI",
          "description": "Useful daylight autonomy values for each sensor. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_udi_from_folder",
              "index": 0
            }
          ]
        },
        {
          "type": "DAGLinkedOutputAlias",
          "annotations": {},
          "name": "UDI Results",
          "description": null,
          "platform": [
            "rhino"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_udi_from_folder",
              "index": 0
            },
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "csharp",
              "module": "Pollination.RhinoHandlers",
              "function": "LoadMeshBasedResultsToRhino",
              "index": 0
            }
          ]
        }
      ],
      "required": true
    },
    {
      "type": "DAGFolderOutput",
      "annotations": {},
      "name": "udi-lower",
      "description": "Results for the percent of time that is below the lower threshold of useful daylight illuminance.",
      "from": {
        "type": "FolderReference",
        "annotations": {},
        "path": "metrics/udi_lower"
      },
      "alias": [
        {
          "type": "DAGGenericOutputAlias",
          "annotations": {},
          "name": "UDI_low",
          "description": "Values for the percent of time that is below the lower threshold of useful daylight illuminance. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_udi_from_folder",
              "index": 0
            }
          ]
        },
        {
          "type": "DAGLinkedOutputAlias",
          "annotations": {},
          "name": "UDI low Results",
          "description": null,
          "platform": [
            "rhino"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_udi_from_folder",
              "index": 0
            },
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "csharp",
              "module": "Pollination.RhinoHandlers",
              "function": "LoadMeshBasedResultsToRhino",
              "index": 0
            }
          ]
        }
      ],
      "required": true
    },
    {
      "type": "DAGFolderOutput",
      "annotations": {},
      "name": "udi-upper",
      "description": "Results for the percent of time that is above the upper threshold of useful daylight illuminance.",
      "from": {
        "type": "FolderReference",
        "annotations": {},
        "path": "metrics/udi_upper"
      },
      "alias": [
        {
          "type": "DAGGenericOutputAlias",
          "annotations": {},
          "name": "UDI_up",
          "description": "Values for the percent of time that is above the upper threshold of useful daylight illuminance. These can be plugged into the \"LB Spatial Heatmap\" component along with meshes of the sensor grids to visualize results.",
          "platform": [
            "grasshopper"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_udi_from_folder",
              "index": 0
            }
          ]
        },
        {
          "type": "DAGLinkedOutputAlias",
          "annotations": {},
          "name": "UDI up Results",
          "description": null,
          "platform": [
            "rhino"
          ],
          "handler": [
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "python",
              "module": "pollination_handlers.outputs.daylight",
              "function": "read_udi_from_folder",
              "index": 0
            },
            {
              "type": "IOAliasHandler",
              "annotations": {},
              "language": "csharp",
              "module": "Pollination.RhinoHandlers",
              "function": "LoadMeshBasedResultsToRhino",
              "index": 0
            }
          ]
        }
      ],
      "required": true
    }
  ]
}